---
title: Managing Service Instances
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

See below for information about managing Config Server service instances using the Cloud Foundry Command Line Interface tool (cf CLI). You can also manage Config Server service instances using <%= vars.scs_platform_name %> Apps Manager.

## <a id="creating"></a>Creating an Instance

Begin by targeting the correct org and space.

<pre class="terminal">
$ cf target -o myorg -s development
</pre>

You can view plan details for the Config Server product using `cf marketplace -s`.

<pre class="terminal">
$ cf marketplace -s p.config-server
Getting service plan information for service p.config-server as user...
OK

service plan   description       free or paid
standard       A standard plan   free
</pre>

Create the service instance using `cf create-service`, using the `-c` flag to provide a JSON object that specifies the configuration parameters. For information about the parameters used to configure a Git backend, see [Configuring with Git](./configuring-with-git.html). For information about the parameters used to configure a HashiCorp Vault backend, see [Configuring with Vault](./configuring-with-vault.html).

General parameters accepted for the Config Server are listed below.

<table>
	<col style="width:15%">
	<col style="width:60%">
	<col style="width:25%">
	<thead>
		<td><strong>Parameter</strong></td>
		<td><strong>Function</strong></td>
		<td><strong>Example</strong></td>
	</thead>
	<tr>
		<td><code>count</code></td>
		<td>The number of nodes to provision: 1 by default, more for running in high-availability mode</td>
    <td><code>'{"count": 3}'</code></td>
	</tr>
</table>

To create an instance, specifying settings for a Git backend and that three nodes should be provisioned:

<pre class="terminal">
$ cf create-service -c '{ "git": { "uri": "https://github.com/spring-cloud-samples/config-repo" }, "count": 3 }' p.config-server standard config-server
</pre>

You can use the `cf services` or `cf service` commands to check the status of the service instance. When the service instance is ready, the `cf service` command will give a status of `create succeeded`:

<pre class="terminal">
$ cf service config-server
Showing info of service config-server in org myorg / space dev as user...

name:            config-server
service:         p.config-server
tags:
plan:            standard
[...]

Showing status of last operation from service config-server...

status:    create succeeded
</pre>

<p class='note'><strong>Important</strong>: The <code>cf service</code> and <code>cf services</code> commands may report a <code>create succeeded</code> status even if the Config Server cannot initialize using the provided settings. For example, given an invalid URI for a Git backend, the service instance may still be created and have a <code>create succeeded</code> status.</p>

## <a id="updating"></a>Updating an Instance

You can update settings on a Config Server service instance using the Cloud Foundry Command Line Interface tool (cf CLI). The `cf update-service` command can be given a `-c` flag with a JSON object containing parameters used to configure the service instance.

To update a Config Server service instance's settings, target the org and space of the service instance:

<pre class="terminal">
$ cf target -o myorg -s development
</pre>

Then run `cf update-service SERVICE_NAME -c '{ "PARAMETER": "VALUE" }'`, where `SERVICE_NAME` is the name of the service instance, `PARAMETER` is a supported parameter, and `VALUE` is the value for the parameter. For information about the parameters used to configure a Git backend, see [Configuring with Git](./configuring-with-git.html). For information about the parameters used to configure a HashiCorp Vault backend, see [Configuring with Vault](./configuring-with-vault.html).

General parameters accepted for the Config Server are listed below.

<table>
	<col style="width:15%">
	<col style="width:60%">
	<col style="width:25%">
	<thead>
		<td><strong>Parameter</strong></td>
		<td><strong>Function</strong></td>
		<td><strong>Example</strong></td>
	</thead>
	<tr>
		<td><code>count</code></td>
		<td>The number of nodes to provision: 1 by default, more for running in high-availability mode</td>
    <td><code>'{"count": 3}'</code></td>
	</tr>
</table>

To update a service instance, configuring a Git backend, run:

<pre class="terminal">
$ cf update-service config-server -c '{"git": { "uri": "https://github.com/spring-cloud-samples/config-repo" } }'
</pre>

To update a service instance and set the count of instances for running in high-availability mode, run:

<pre class="terminal">
$ cf update-service config-server -c '{"count": 3}'
</pre>

You can use the `cf services` or `cf service` commands to check the status of the service instance. When the update is complete, the `cf service` command will give a status of `update succeeded`:

<pre class="terminal">
$ cf service config-server
Showing info of service config-server in org myorg / space dev as user...

name:            config-server
service:         p.config-server
tags:
plan:            standard
[...]

Showing status of last operation from service config-server...

status:    update succeeded
</pre>

<p class='note'><strong>Important</strong>: The <code>cf service</code> and <code>cf services</code> commands may report an <code>update succeeded</code> status even if the Config Server cannot initialize using the provided settings. For example, given an invalid URI for a Git backend, the service instance may still be restarted and have an <code>update succeeded</code> status.</p>

The service instance is now updated and ready to be used. For information about using an app to access configuration values served by a Config Server service instance, see <a href="./writing-client-applications.html">Writing Client Applications</a>.
